EX1

#include <stdio.h>
#include <stdlib.h>

#define BUFFER_SIZE 128

int main() {
    FILE *file;
    char buffer[BUFFER_SIZE];

    // Tente abrir o arquivo em modo leitura
    file = fopen("lab2_ex1.txt", "r");

    // Se o arquivo não existe, crie-o
    if (file == NULL) {
        printf("Arquivo não encontrado. Criando o arquivo...\n");

        // Abra o arquivo em modo escrita para criar o arquivo
        file = fopen("lab2_ex1.txt", "w");
        if (file == NULL) {
            perror("Erro ao criar o arquivo");
            exit(1); // Encerra o programa com código de erro
        }

        // Escreva conteúdo no arquivo
        fprintf(file, "Este é o conteúdo inicial do arquivo.\n");

        // Feche o arquivo após a escrita
        fclose(file);

        // Reabra o arquivo em modo leitura
        file = fopen("lab2_ex1.txt", "r");
        if (file == NULL) {
            perror("Erro ao reabrir o arquivo");
            exit(1); // Encerra o programa com código de erro
        }
    }

    // Leia o conteúdo do arquivo para um buffer
    size_t bytesRead = fread(buffer, sizeof(char), BUFFER_SIZE - 1, file);

    // Adicione um caractere nulo ao final do buffer após a leitura
    buffer[bytesRead] = '\0';

    // Exiba o conteúdo lido na tela
    printf("Conteúdo do arquivo:\n%s\n", buffer);

    // Feche o arquivo após a leitura
    fclose(file);

    return 0; // Encerra o programa com sucesso
}







Ex2
#include <stdio.h>
#include <stdlib.h>

#define BUFFER_SIZE 128

int main() {
    FILE *file;
    char buffer[BUFFER_SIZE];
    int lineCount = 0; // Contador de linhas

    // 1. Abra o arquivo de texto em modo leitura
    file = fopen("lab2_ex2.txt", "r");

    // Verifique se o arquivo foi aberto com sucesso
    if (file == NULL) {
        perror("Erro ao abrir o arquivo");
        exit(1); // Encerra o programa com código de erro
    }

    // 2. Leia o arquivo em partes usando um buffer e conte as linhas
    while (fgets(buffer, BUFFER_SIZE, file) != NULL) {
        // 3. Verifique quantos '\n' existem no buffer
        for (int i = 0; buffer[i] != '\0'; i++) {
            if (buffer[i] == '\n') {
                lineCount++;
            }
        }
    }

    // Exiba o número total de linhas na tela
    printf("Número total de linhas: %d\n", lineCount);

    // Feche o arquivo após a leitura
    fclose(file);

    return 0; // Encerra o programa com sucesso
}









Ex 3
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>  // Para funções open(), O_RDONLY, O_WRONLY, O_CREAT, O_TRUNC
#include <unistd.h> // Para funções read(), write(), close()
#include <errno.h>  // Para função perror()

#define BUFFER_SIZE 128

int main() {
    int srcFile, destFile;  // Descritores de arquivo
    char buffer[BUFFER_SIZE];  // Buffer de 128 bytes para leitura/escrita
    ssize_t bytesRead, bytesWritten;  // Número de bytes lidos e escritos

    // 1. Abra o arquivo de origem em modo leitura
    srcFile = open("lab2_ex3_origem.txt", O_RDONLY);
    if (srcFile == -1) {
        perror("Erro ao abrir o arquivo de origem");
        exit(1); // Encerra o programa com código de erro
    }

    // 2. Abra ou crie o arquivo de destino em modo escrita (com truncamento)
    destFile = open("lab2_ex3_destino.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (destFile == -1) {
        perror("Erro ao abrir ou criar o arquivo de destino");
        close(srcFile);  // Fecha o arquivo de origem antes de sair
        exit(1); // Encerra o programa com código de erro
    }

    // 3. Leia do arquivo de origem e escreva no arquivo de destino
    while ((bytesRead = read(srcFile, buffer, BUFFER_SIZE)) > 0) {
        bytesWritten = write(destFile, buffer, bytesRead);
        if (bytesWritten == -1) {
            perror("Erro ao escrever no arquivo de destino");
            close(srcFile);
            close(destFile);
            exit(1);
        }
    }

    if (bytesRead == -1) {
        perror("Erro ao ler o arquivo de origem");
    }

    // 4. Feche ambos os arquivos
    close(srcFile);
    close(destFile);

    printf("Cópia concluída com sucesso!\n");

    return 0; // Encerra o programa com sucesso
}
